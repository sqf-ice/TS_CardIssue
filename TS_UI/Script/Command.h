//#####################################
//
//	class CCommand
//
//	命令类（脚本规约中的命令）
//
//	仅构建脚本规约中的相应命令，与指令无关
//
//	注意：
//	所有构建命令的方法中都带有参数 RefreshFlag ，当该参数值为true时，所构建的指令将会自动添加至生成的脚本缓存中；
//	字符串长度：组成字符串的字符个数，如"12346578"的字符串长度为8；
//	字节数：字符串中每两个字符作为一个字节，如"12345678"的字节数为4；
//
//	最后修改日期：2015-09-01 18:52
//#####################################


#ifndef COMMAND_H
#define COMMAND_H

#include "Parameter.h"
#include "Information.h"
#include <string>
#include <sstream>
using namespace std;

#define STYLE_ASSIGNMENT	0x80	//在变量赋值“>”前后添加空格，如“[ATR(9,8)] > 1”
#define STYLE_FUNTION_NAME	0x40	//在函数名后左括号前，添加空格，如“[ATR (9,8)]>1”
#define STYLE_COMMA			0x20	//在函数参数列表的逗号后添加空格，如“[ATR(9, 8)]>1”



//注意：所有string型的参数，不允许传入空串""，如该参数确实无需传递任何数据内容，请传入"00"
class CCommand
{
public:
	CCommand( CInformation *inf );
	~CCommand();

		/**************************************
		功能：重设错误标志
		描述：
		在构建命令的过程中，只要发生了错误，内部错误标志就会被标志为"true"；
		使用该方法可以将错误标志重设为"false"，与方法 Error() 结合使用。
		**************************************/
	void ReSetErrFlag();
		/**************************************
		功能：判断错误
		返回：
		true：发生错误
		false：并没有错误
		描述：
		在构建命令的过程中，只要发生了错误，内部错误标志就会被标志为"true"；
		在使用方法 ReSetErrFlag() 将内部错误标志置为"false"之后，可使用该方法来获取错误标志，用以判断之间所构建的一条或多条命令是否正确。
		**************************************/
	bool Error();
		/**************************************
		功能：打开或关闭参数检查
		参数：
		IN：Swf：当该值为true时，每构建一条命令前都会对各参数进行相应的检查，如果该值为false，则忽略参数的检查
		描述：
		在class CCommand实例化时默认打开构建命令时的参数检查，参数检查将会使一些参数不规范的命令构建不成功，如有需要可以通过此方法将其关闭
		**************************************/
	void Error_Check(bool Swf);
		/**************************************
		功能：设置生成脚本命令的样式
		参数（可有以下一个或多个宏定义按位求或来拼接组成）：
		STYLE_ASSIGNMENT：在变量赋值“>”前后添加空格，如“[ATR(9,8)] > 1”
		STYLE_FUNTION_NAME：在函数名后左括号前，添加空格，如“[ATR (9,8)]>1”
		STYLE_COMMA：在函数参数列表的逗号后添加空格，如“[ATR(9, 8)]>1”
		描述：
		可通过该设置项来更变所生成脚本的样式
		**************************************/
	void Style_Set( unsigned char Sty );


		/**************************************
		功能：构建变量赋值命令
		命令：Data > No
		参数：
		IN：No：被赋值变量的序号，有效范围0-99
		IN：Data：被赋值内容
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		备注：
		可以将除空格外的任意字符赋值给变量，脚本执行程序仅会自动去掉赋值串中的空格，并不会做其他处理；
		所谓的字串添加了双引号""就代表AN数据，只会在发送COS指令时才会生效，在其他地方这双引号会被认为是字符串的一部分；
		最简单的测试，使用同样的密钥，对 "12345678" 和 3132333435363738 执行DES算法，结果是不一样的。
		**************************************/	
	string VAR( string Data, int No, bool RefreshFlag = true );
		/**************************************
		功能：构建复位命令
		命令：RESET
		参数：
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		**************************************/
	string RESET( bool RefreshFlag = true );
		/**************************************
		功能：截取ATR响应
		命令：[ATR(Pos, Len)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：ATR_pos：需截取ATR的起始偏移，从0开始，以字节为单位
		IN：ATR_len：需截取ATR的长度，从起始偏移开始，以字节为单位
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		**************************************/
	string ATR(int Pos, int Len, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：DES运算
		命令：[DES(Data, Key)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Data：待加密的数据，要求必须由16位字符组成，如"1234567812345678"
		IN：Key：使用的密钥，要求必须由16位字符组成，如"1234567812345678"
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		备注：
		如果入参 Data 或 Key 不符合规则，脚本执行程序将会自动做以下处理：
		Ⅰ：超长：自动删除超出长度的内容，留下的内容可能会含有非法字符，则进行第二步处理；
		Ⅱ：非法字符：整个字节都是非法字符，直接用"A4"来替换；只有高字节是非法字符，将高字节替换为'4'；只有低字节是非法字符，设高字节十六进制值为X，先将高字节更变为（X+6）%0x10，然后再将低字节替换为'4'；
		Ⅲ：不足长：把不足长部分当作非法字符，按第二步处理
		**************************************/	
	string DES( string Data, string Key, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：3DES运算
		命令：[3DES(Data, Key)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Data：待加密的数据，要求必须由16位字符组成，如"1234567812345678"
		IN：Key：使用的密钥，要求必须由32位字符组成，如"12345678123456781234567812345678"
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		备注：
		如果参数不符合规则，脚本执行程序将会自动进行处理，处理规则见 DES 函数的注释部分。
		**************************************/
	string TDES( string Data, string Key, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：异或运算
		命令：[XOR(Par1, Par2)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Par1：参数1，长度要求必须为2的倍数
		IN：Par2：参数2，长度要求必须为2的倍数，并且与参数1的长度相等
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		注意：
		这里所谓的异或运算指的是将Par1与Par2转换成十六进制数据后再做的运算，如par1="33"，Par2="0F"，得到结果为"3C"；
		当然该方法的作用仅是构建命令，并不会真的输出运算结果。
		备注：
		一般而言要求两个参数长度一致，如果两参数长度不一致，脚本执行程序将自动在较短参数后填充'0'至等长；
		两个参数的长度都要求是2的倍数，如果不是2的倍数，脚本执行程序将会自动使用全'0'的字符来替换整个参数，但有时可能会出现难以预料的结果；
		如果出现非法字符，脚本执行程序将会自动使用'0'来替换
		**************************************/
	string XOR( string Par1, string Par2, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：固定密钥计算MAC
		命令：Data[CMAC(Pos, Len, Key)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Data：需计算MAC的数据，长度要求必须为2的倍数，脚本内部会自动对8字节整长做扩展
		IN：Pos：需计算MAC数据的起始字节偏移，一般为0，Data中的每两个字符算一个字节
		IN：Len：需计算MAC数据的字节数，根据Pos与Len指定了在Data中计算MAC的数据块
		IN：Key：所使用的密钥，要求必须由32个字符组成
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		备注：
		入参 Data 并不一定都用于MAC计算，根据 Pos 与 Len 来指定，脚本内部会自动对8字节整长做扩展
		如果入参 Key 的长度不满足
		**************************************/
	string CMAC( string Data, int Pos, int Len, string Key, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：字符串截取
		命令：[SUBSTR(Pos, Len, Data)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Pos：截取部分的起始字节偏移，Data中的每两个字符算一个字节
		IN：Len：需截取数据的字节数
		IN：Data：原字符串，将从该字符串中截取出新的子串，长度要求必须为2的倍数
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		**************************************/
	string SUBSTR( int Pos, int Len, string Data, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：取卡片应答
		命令：[RESP(Pos, Len)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Pos：所需截取卡片应答的起始字节偏移
		IN：Len：需取出数据的字节数
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		**************************************/
	string RESP( int Pos, int Len, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：连接加密机
		命令：[CONNECTJMJ(DevType, IP, Port)]
		参数：
		IN：DevType：无效参数，该参数并无任何作用，建议取值为"0"
		IN：IP：加密机的IP地址，要求符合IP地址的编写规范，如"192.168.0.1"
		IN：Port：端口号，请直接输入十进制的数值串，如"80"表示为十进制数值80，取值范围0-65535
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		**************************************/
	string CONNECTJMJ( string DevType, string IP, string Port, bool RefreshFlag = true );
		/**************************************
		功能：关闭加密机
		命令：[CLOSEJMJ]
		返回：
		输出构建后的命令，如发生错误则输出空串
		**************************************/
	string CLOSEJMJ(bool RefreshFlag = true);
		/**************************************
		功能：加密机装载密钥
		命令：[LOADKEY(CosManu, Stowage, KeyNo, PKeyNo, Keyfsjs, PKeyfsjs, Keyfsyz, PKeyfsyz, Comm, KeyHead, KeyLen, PKeyLen)]
		参数：
		IN：CosManu：COS厂商：0-华大，1-德生，3-华虹，4-同方，5-大唐，6-天津卡，7-华虹，8-华大新卡，20-通用版本32K华虹
		IN：Stowage：装载方式：0-密文，1-明文，10-密文更新，11-明文更新
		IN：KeyNo：加密机所用密钥的密钥地址，请直接输入十六进制的数值串，如"173"表示0x173
		IN：PKeyNo：加密机保护密钥的ID，请直接输入十六进制的数值串
		IN：Keyfsjs：导出密钥的分散级数，可取值为"1"、"2"或"3"【见脚本都将其设为"1"，暂时有疑惑】
		IN：PKeyfsjs：保护密钥的分散级数，一般为"0"
		IN：Keyfsyz：导出密钥的分散因子，要求必须由16位字符组成，该值要求为ATR应答中的最后八字节内容
		IN：PKeyfsyz：保护密钥的分散因子，一般为空串
		IN：Comm：装载密钥的命令头，一般要求由10位字符组成，如"00D4000018"
		IN：KeyHead：导出密钥的密钥头，长度要求必须为2的倍数
		IN：KeyLen：导出密钥的字节长度：0-8字节，1-16字节
		IN：PKeyLen：保护密钥的字节长度：0-8字节，1-16字节
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		**************************************/
	string LOADKEY( string CosManu, string Stowage, string KeyNo, string PKeyNo, string Keyfsjs, string PKeyfsjs, string Keyfsyz, string PKeyfsyz, string Comm, string KeyHead, string KeyLen, string PKeyLen, bool RefreshFlag = true );
		/**************************************	
		功能：设置卡座
		命令：[SETNAD(CardNad)]
		参数：
		IN：CardNad：卡座：0-主卡座，1-上卡座，2-内卡座
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		**************************************/
	string SETNAD( string CardNad, bool RefreshFlag = true );
		/**************************************
		功能：外部认证
		命令：[GERNERALEXTERNALAUTH(AuthType, DF, EF, KeyIndex, KeyVer, DivFactor, PSAMKeyType, PSAMorJMJKeyID, ConstKey, Flag)]
		参数：
		IN：AuthType：认证的方式：0-固定密钥，1-加密机，2-PSAM卡
		IN：DF：需认证密钥所在目录的FID，必须由4位字符组成，可取值为"3F00"、"DDF1"、"DF01"等，如所选择目录为ADF文件，脚本内部程序将自动先选择SSSE，其后再选择指定的ADF
		IN：EF：需认证密钥所在目录下的文件，必须由4位字符组成，可取值为"EF05"、"EF06"等，请务必保证该文件可选，否则将返回错误
		IN：KeyIndex：所需认证密钥的密钥标志，要求必须由2位字符组成，如"06"、"0A"等
		IN：KeyVer：需认证密钥的密钥版本，要求必须由2位字符组成，可取值："00"、"01"、"02"、"03"
		IN：DivFactor：分散因子，使用PSAM时该值要求必须由48位字符组成，格式为“三级因子（卡标志）+二级因子（市标志）+一级因子（省标志）”；使用加密机时要求必须由16位字符组成，格式为ATR应答最后八字节内容
		IN：PSAMKeyType：密钥用途，仅在使用PSAM时有效，要求必须由2位字符组成，如"27"、"48"等
		IN：PSAMorJMJKeyID：PSAM密钥标志或加密机密钥地址，使用PSAM时要求必须由2位字符组成，如"08"、"10"等；使用加密机时请直接输入十六进制的数值串，入"173"表示0x173
		IN：ConstKey：固定密钥值，仅在使用固定密钥时有效，要求必须由32位字符组成
		IN：Flag：【暂不清楚用途的参数】
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		注意：
		入参中 DF 和 EF 所指定的文件目录将会自动选择，如果选择则会返回错误，即使是 EF 选择不成功也会返回错误。
		**************************************/
	string GERNERALEXTERNALAUTH( string AuthType, string DF, string EF, string KeyIndex, string KeyVer, string DivFactor, string PSAMKeyType, string PSAMorJMJKeyID, string ConstKey, string Flag, bool RefreshFlag = true );
		/**************************************
		功能：接下的命令将忽略错误（注意：对脚本内部程序而言，并非针对本程序）
		命令：BEGINGO
		参数：
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		描述：
		在 BEGINGO 与 FINALGO 间的语句，将不做错误检查，并总是继续往下执行；
		注意：
		BEGINGO 与 FINALGO 针对的脚本内部程序，而并非是本程序，请勿混淆。
		**************************************/
	string BEGINGO( bool RefreshFlag = true );
		/**************************************
		功能：终止BEGINGO语句的效果
		命令：FINALGO
		参数：
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		描述：
		在 BEGINGO 与 FINALGO 间的语句，将不做错误检查，并总是继续往下执行；
		注意：
		在 FINALGO 后面不允许在此出现 BEGINGO 或 FINALGO 语句，否则脚本内部程序将会报错；
		BEGINGO 与 FINALGO 针对的脚本内部程序，而并非是本程序，请勿混淆。
		**************************************/
	string FINALGO( bool RefreshFlag = true );
		/**************************************
		功能：使用加密机或PSAM计算MAC
		命令：[GETMAC(Type, Serial, DivFactor, DivType, KeyID, Radom, InitData, ProtectKey, GetRandom, Pad)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Type：工作类型：1-加密机计算认证码，2-PSAM卡算认证码，3-加密机算主控密钥，4-PSAM卡算主控密钥（认证码指的是卡的识别码中的认证码）
		IN：Serial：暂未启用，建议为"1"
		IN：DivFactor：分散因子，使用PSAM时该值要求必须由48位字符组成，格式为“三级因子（卡标志）+二级因子（市标志）+一级因子（省标志）”；使用加密机时要求必须由16位字符组成，格式为ATR应答最后八字节内容
		IN：DivType：PSAM卡密钥用途，仅在使用PSAM卡时生效，要求必须由2位字符组成，如"27"、"48"等
		IN：KeyID：PSAM密钥标志或加密机密钥地址，使用PSAM时要求必须由2位字符组成，如"08"、"10"等；使用加密机时请直接输入十六进制的数值串，入"173"表示0x173
		IN：Radom：初始化向量，仅在 GetRandom 参数为 0 时生效，否则将自动取随机数，当生效时要求必须由16位字符组成
		IN：InitData：需计算MAC的数据，长度要求必须为2的倍数
		IN：ProtectKey：加密机保护密钥，一般为"1"
		IN：GetRandom：取随机数标志，当该值不为 0 时表示将自动取随机数作为初始化向量，建议如需取随机数，将该值设为"1"
		IN：Pad：后面尾补【暂未完全弄清楚该参数的作用，InitData的尾部不是应该是"8000..."吗？怀疑是在自动取随机数时的尾补】，常见为"00000000"
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		**************************************/
	string GETMAC( string Type, string Serial, string DivFactor, string DivType, string KeyID, string Radom, string InitData, string ProtectKey, string GetRandom, string Pad, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：乘法运算
		命令：[PRODUCT(Par1, Par2)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Par1：参数1，请直接输入十进制的数值串，如"100"表示十进制数值100
		IN：Par2：参数2，请直接输入十进制的数值串，如"100"表示十进制数值100
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		描述：
		该命令将输出 Par1 与 Par2 相乘的结果，结果为十进制的数值串，并不会对返回串的左边做补'0'操作
		**************************************/
	string PRODUCT( string Par1, string Par2, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：十进制数值串转换成十六进制数值串
		命令：[HEX(Decimal)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Decimal：待转换的十进制数值串，如"100"将表示十进制的数值100
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		描述：
		输出的十六进制数值串固定为8位，如果不足则会在左边补0，如果超长将会截取最右边的8位；
		输入十进制数值串可以为负数，如输入"-1"将会输出"FFFFFFFF"，输入"-3"将会输出"FFFFFFFD"。
		**************************************/
	string HEX( string Decimal, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：十六进制数值串转换成十进制数值串
		命令：[DHEX(Hexadecimal)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Hexadecimal：待转换的十六进制数值串，如"1AB"将表示十进制的数值0x1AB，最多可允许为8位
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		描述：
		输入的十六进制串最多可允许输入8位，如果超出，脚本内部程序将自动截取最后的8位；
		如果（被截取后的）输入数值刚好为8位，而且最高位数值大于等于'8'，结果将会输出为负数，形如计算机编码中的有符号数据类型
		**************************************/
	string DHEX( string Hexadecimal, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：十进制数值串转换成十六进制数值串
		命令：[EX_HEX(Decimal, Len)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Decimal：待转换的十进制数值串，如"100"将表示十进制的数值100
		IN：Len：要求输出十六进制数值串的最小位数，如果实际位数小于该值将在左边补0，如果大于该值将不做任何处理
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		描述：
		输入十进制数值串可以为负数，如输入"-1"将会输出"FFFFFFFF"，输入"-3"将会输出"FFFFFFFD"。
		注意：
		如果转换所得并未经 Len 参数处理过的十六进制数值串的位数已经超过了8位，脚本内部程序将会自动截取最后的8位，然后才根据 Len 参数做处理；
		**************************************/
	string EX_HEX( string Decimal, string Len, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：求字符串长度
		命令：[LEN(Data)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Data：需求长度的字符串
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		描述：
		求取字符串的长度，如"12345678"将返回8，返回数值串以十六进制来表示
		警告：
		说明文档上注明该命令是求取字符串的字节数，但实际验证却发现返回的是字符数。
		**************************************/
	string LEN( string Data, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：获取系统时间
		命令：[GETTIME(Format, RFU)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Format：格式控制参数：1-“yyyy-MM-dd hh:mm:ss”，2-“yyyyMMddhhmmss”，3-“yyyy-MM-dd”，4-“yyyyMMdd”
		IN：RFU：预留参数，暂未启用
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		描述：
		在脚本内部程序中，只要格式控制参数的值不是所列举的1-4，都将使用4的格式
		**************************************/
	string GETTIME( string Format, string RFU, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：减法运算
		命令：[SUBTRACT(Minuend, Subtrahend)]【 > VarNo 】，全角中括号【】中的内容为可选部分
		参数：
		IN：Minuend：被减数，请输入十进制数值串，如"100"表示十进制数值100
		IN：Subtrahend：减数，请输入十进制数值串，如"100"表示十进制数值100
		IN：VarNo：变量序号，存放命令结果，如果该值小于0则不构建存储部分
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		描述：
		输出的结果为十进制数值串，而且不会做任何位数扩展处理
		**************************************/
	string SUBTRACT( string Minuend, string Subtrahend, int VarNo = -1, bool RefreshFlag = true );
		/**************************************
		功能：返回信息
		命令：[RETURN(......)]
		参数：
		IN：KeyType：标识脚本所使用密钥的类型：0-固定密钥，1-加密机，2-PSAM卡
		IN：RefreshFlag：刷新标志，当该值为true时，所构建的命令将会自动添加至生成的脚本缓存中
		返回：
		输出构建后的命令，如发生错误则输出空串
		描述：
		请使用 RETURN_Value_Add 方法来添加需输出的信息
		**************************************/
	string RETURN( int KeyType, bool RefreshFlag = true );
		/**************************************
		功能：添加返回信息
		参数：
		IN：Tag：输出信息的标签
		IN：VarNo：所输出内容所在的变量序号
		IN：Format：格式处理：0-不处理，1-an格式，2-cn格式，3-前补0的数值（若为0则返回0），4-后补F的数值（若为0则返回0），5--前补0的数值（若为0则返回空串），6-后补F的数值（若为0则返回空串）
		描述：
		可多次调用该方法来添加多条信息，在执行 RETURN 方法输出后缓存会自动清空。
		**************************************/
	void RETURN_Value_Add( string Tag, int VarNo, int Format );



private:
	class CReturnValue
	{
	public:
		string Tag;
		int VarNo;
		int ForMat;
	};
	vector<CReturnValue> RetValue;

	CInformation *const Info;

	bool ErrFlag;				//错误标志，当命令构建失败后该标志将会被置为true
	bool ErrCheckFlag;			//错误检查标志，当该值为true时，构建命令时将会检查参数，参数检查可能会使一下命令构建不成功，如有需要请将该值置为false
	string Style_FuntionName;	//在函数名后左括号前要添加的字符，如添加空格“[ATR (9,8)]>1”，一般而言该值只能取值为空串""或一个空格字符" "
	string Style_Comma;			//在函数参数列表的逗号后要添加的字符，如添加空格“[ATR(9, 8)]>1”，一般而言该值只能取值为空串""或一个空格字符" "
	string Style_Assignment;	//在变量赋值“>”前后要添加的字符，如添加空格“[ATR(9,8)] > 1”，一般而言该值只能取值为空串""或一个空格字符" "
	stringstream sstr;			//用于构建命令
	stringstream serr;			//用于组建错误信息

		/**************************************
		功能：设置错误标识
		描述：将错误标识置为true，并重设Stream的缓存
		**************************************/
	void Set_Error_Flag();//设置错误标识
		/**************************************
		功能：检查参数是否正确
		参数：
		IN：Data：待检查的参数
		IN：Len：当Data中不含变量及常量时，将检查其组成字符是否符合该值的要求，如果该值为0则检查Data中字符是否为偶数，如果该值小于0则不对其做检查
		返回：
		true：检查通过
		false：检查失败
		情况列举：
		A、Data含有常量或变量，剩余数据含有非法字符，返回 false;
		B、Data含有常量或变量，剩余数据不含非法字符，返回 true;
		C、Data不含常量或变量，数据中含有非法字符，返回 false;
		D、Data不含常量或变量，数据中不含非法字符，参数Len值小于0，返回 true;
		E、Data不含常量或变量，数据中不含非法字符，参数Len值等于0，Data中有效字符数目为偶数，返回 true;
		F、Data不含常量或变量，数据中不含非法字符，参数Len值等于0，Data中有效字符数目为奇数，返回 false;
		G、Data不含常量或变量，数据中不含非法字符，参数Len值大于0，Data中有效字符数目不等于Len值，返回 false;
		H、Data不含常量或变量，数据中不含非法字符，参数Len值大于0，Data中有效字符数目等于Len值，返回 true;
		描述：将错误标识置为true，并重设Stream的缓存
		**************************************/
	bool CheckData(string Data, int Len);

};


#endif//COMMAND_H
